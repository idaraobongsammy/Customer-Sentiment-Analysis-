{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1SanJ1rfDNAs39O28tl-TrxJsltl6KjOt","authorship_tag":"ABX9TyM8EKyG1cXSY7mUD5ArDMW7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"SpQ598m27cm8"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"05ea8102"},"source":["# Task\n","Analyze the sentiment of customer reviews based on the ratings provided in the dataset located at \"/content/drive/MyDrive/Dataset /Amazon product reviews .zip\"."]},{"cell_type":"markdown","metadata":{"id":"e301f2dd"},"source":["## Extract data\n","\n","### Subtask:\n","Extract the contents of the zip file to access the review data.\n"]},{"cell_type":"markdown","metadata":{"id":"48216fc7"},"source":["**Reasoning**:\n","Extract the contents of the zip file to the specified directory.\n","\n"]},{"cell_type":"code","metadata":{"id":"c10c4517","executionInfo":{"status":"ok","timestamp":1760600009884,"user_tz":-60,"elapsed":4212,"user":{"displayName":"Idaraobong Sammy","userId":"17241616854580119670"}}},"source":["import zipfile\n","zip_file_path = '/content/drive/MyDrive/Dataset /Amazon product reviews .zip'\n","extraction_dir = '/content/'\n","with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:\n","    zip_ref.extractall(extraction_dir)"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8a3c3893"},"source":["## Load data\n","\n","### Subtask:\n","Load the review data into a pandas DataFrame.\n"]},{"cell_type":"markdown","metadata":{"id":"c4a2f6b8"},"source":["**Reasoning**:\n","Import pandas and load the specified CSV file into a DataFrame, then display the first few rows.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":224},"id":"22b771cd","executionInfo":{"status":"ok","timestamp":1760600235911,"user_tz":-60,"elapsed":8292,"user":{"displayName":"Idaraobong Sammy","userId":"17241616854580119670"}},"outputId":"42e02dd8-2a22-4331-a941-d5c74812997a"},"source":["import pandas as pd\n","df = pd.read_csv('/content/ratings_Electronics (1).csv')\n","display(df.head())"],"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":["    AKM1MP6P0OYPR  0132793040  5.0  1365811200\n","0  A2CX7LUOHB2NDG  0321732944  5.0  1341100800\n","1  A2NWSAGRHCP8N5  0439886341  1.0  1367193600\n","2  A2WNBOD3WNDNKT  0439886341  3.0  1374451200\n","3  A1GI0U4ZRJA8WN  0439886341  1.0  1334707200\n","4  A1QGNMC6O1VW39  0511189877  5.0  1397433600"],"text/html":["\n","  <div id=\"df-be09f601-0f06-4e49-8e5d-94c424fa77c7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AKM1MP6P0OYPR</th>\n","      <th>0132793040</th>\n","      <th>5.0</th>\n","      <th>1365811200</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A2CX7LUOHB2NDG</td>\n","      <td>0321732944</td>\n","      <td>5.0</td>\n","      <td>1341100800</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>A2NWSAGRHCP8N5</td>\n","      <td>0439886341</td>\n","      <td>1.0</td>\n","      <td>1367193600</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>A2WNBOD3WNDNKT</td>\n","      <td>0439886341</td>\n","      <td>3.0</td>\n","      <td>1374451200</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>A1GI0U4ZRJA8WN</td>\n","      <td>0439886341</td>\n","      <td>1.0</td>\n","      <td>1334707200</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>A1QGNMC6O1VW39</td>\n","      <td>0511189877</td>\n","      <td>5.0</td>\n","      <td>1397433600</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-be09f601-0f06-4e49-8e5d-94c424fa77c7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-be09f601-0f06-4e49-8e5d-94c424fa77c7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-be09f601-0f06-4e49-8e5d-94c424fa77c7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-0f8a85bb-3d0c-467d-9dec-cc043b6dc2b5\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0f8a85bb-3d0c-467d-9dec-cc043b6dc2b5')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-0f8a85bb-3d0c-467d-9dec-cc043b6dc2b5 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"AKM1MP6P0OYPR\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"A2NWSAGRHCP8N5\",\n          \"A1QGNMC6O1VW39\",\n          \"A2WNBOD3WNDNKT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"0132793040\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"0321732944\",\n          \"0439886341\",\n          \"0511189877\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"5.0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0,\n        \"min\": 1.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          5.0,\n          1.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1365811200\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25565816,\n        \"min\": 1334707200,\n        \"max\": 1397433600,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1367193600,\n          1397433600,\n          1374451200\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"0bbed785"},"source":["## Analyze sentiment\n","\n","### Subtask:\n","Analyze the sentiment based on the ratings provided in the dataset.\n"]},{"cell_type":"markdown","metadata":{"id":"73b695ee"},"source":["**Reasoning**:\n","Define a function to categorize ratings into sentiment labels, apply this function to create a new column, and calculate the distribution of sentiment categories.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":207},"id":"72bb0543","executionInfo":{"status":"ok","timestamp":1760600056768,"user_tz":-60,"elapsed":5380,"user":{"displayName":"Idaraobong Sammy","userId":"17241616854580119670"}},"outputId":"64b464a2-208b-4a99-eca1-57204f90eccb"},"source":["def categorize_sentiment(rating):\n","    if rating == 5:\n","        return 'positive'\n","    elif rating >= 3 and rating <= 4:\n","        return 'neutral'\n","    elif rating >= 1 and rating <= 2:\n","        return 'negative'\n","    else:\n","        return 'unknown' # Handle unexpected rating values\n","\n","df['sentiment'] = df['5.0'].apply(categorize_sentiment)\n","\n","sentiment_distribution = df['sentiment'].value_counts()\n","display(sentiment_distribution)"],"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":["sentiment\n","positive    4347540\n","neutral     2118854\n","negative    1358087\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>sentiment</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>positive</th>\n","      <td>4347540</td>\n","    </tr>\n","    <tr>\n","      <th>neutral</th>\n","      <td>2118854</td>\n","    </tr>\n","    <tr>\n","      <th>negative</th>\n","      <td>1358087</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"9b8b400d"},"source":["## Summarize findings\n","\n","### Subtask:\n","Provide a summary of the sentiment analysis results.\n"]},{"cell_type":"markdown","metadata":{"id":"98da9589"},"source":["**Reasoning**:\n","Provide a summary of the sentiment analysis results based on the `sentiment_distribution` Series.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3f54cdd7","executionInfo":{"status":"ok","timestamp":1760600071847,"user_tz":-60,"elapsed":11,"user":{"displayName":"Idaraobong Sammy","userId":"17241616854580119670"}},"outputId":"c7cc9ca0-a421-4941-ca23-e259e49ad42d"},"source":["total_reviews = sentiment_distribution.sum()\n","positive_proportion = sentiment_distribution.get('positive', 0) / total_reviews\n","neutral_proportion = sentiment_distribution.get('neutral', 0) / total_reviews\n","negative_proportion = sentiment_distribution.get('negative', 0) / total_reviews\n","\n","print(f\"Sentiment Analysis Summary:\")\n","print(f\"Total reviews analyzed: {total_reviews}\")\n","print(f\"Positive reviews: {sentiment_distribution.get('positive', 0)} ({positive_proportion:.2%})\")\n","print(f\"Neutral reviews: {sentiment_distribution.get('neutral', 0)} ({neutral_proportion:.2%})\")\n","print(f\"Negative reviews: {sentiment_distribution.get('negative', 0)} ({negative_proportion:.2%})\")\n","print(\"\\nNotable Observation: The sentiment distribution shows a strong leaning towards positive reviews, accounting for a significant majority of the total reviews.\")"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Sentiment Analysis Summary:\n","Total reviews analyzed: 7824481\n","Positive reviews: 4347540 (55.56%)\n","Neutral reviews: 2118854 (27.08%)\n","Negative reviews: 1358087 (17.36%)\n","\n","Notable Observation: The sentiment distribution shows a strong leaning towards positive reviews, accounting for a significant majority of the total reviews.\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":274},"id":"bfccc416","executionInfo":{"status":"ok","timestamp":1760600325920,"user_tz":-60,"elapsed":379,"user":{"displayName":"Idaraobong Sammy","userId":"17241616854580119670"}},"outputId":"3a7858e0-d342-4322-f142-c85ee779b5c6"},"source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","plt.figure(figsize=(8, 6))\n","sns.barplot(x=sentiment_distribution.index, y=sentiment_distribution.values)\n","plt.title('Distribution of Sentiment')\n","plt.xlabel('Sentiment')\n","plt.ylabel('Number of Reviews')\n","plt.show()"],"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"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o6MNScbMmTPz3RcdHW3bXrdunSHJKFeunHHx4kVb+0cffWRIMqZPn25rCwsLM3r37v2nY96stt69exthYWG27cWLFxuSjLFjx9r1e/TRRw2LxWLs37/f1ibJ8PX1tWvbtWuXIcl444038sz1e9OmTTMkGe+//76t7erVq0ZkZKQREBBg99zDwsKMDh063HQ8wzCM3Nxc22tdqlQpo3v37saMGTOMw4cP5+nbt29fo0yZMsbp06ft2rt162YEBwcbly9fNgzj//9/1KhRw8jKyrL1mz59uiHJ2L17t62tQ4cOdq/ldQcPHszz+vfu3duQZLzyyiu2tnPnzhl+fn6GxWIx5s+fb2v/8ccfDUnGqFGjbG0vv/yy4e/vb/z00092cw0fPtzw8vIy0tLS7OYuXry4cfbsWVu/JUuWGJKMzz//3NYWHx9v8KsSuH04lQ8gXwEBATe9Oz8kJESStGTJErvTpI6wWq2Ki4srcP9evXopMDDQtv3oo4+qTJkyWr58+S3NX1DLly+Xl5eXBg0aZNf+zDPPyDAMrVixwq69VatWqly5sm27du3aCgoK0s8///yn85QuXVrdu3e3tfn4+GjQoEHKzMzU+vXrHa7dYrFo1apVGjt2rIoWLap58+YpPj5eYWFh6tq1q+0aU8Mw9PHHH6tjx44yDEOnT5+2fbVp00YXLlzQjh077MaOi4uzux74+pHnP3uef6Zfv362f4eEhKh69ery9/fX448/bmuvXr26QkJC7OZauHChmjZtqqJFi9rV36pVK+Xk5GjDhg1283Tt2lVFixZ1ev0Abt1dE0w3bNigjh07qmzZsrJYLFq8eLHDYxiGocmTJ6tatWqyWq0qV66cxo0b5/xigTtAZmamXQj8o65du6pJkybq16+fSpUqpW7duumjjz5yKKSWK1fOoRudqlatardtsVhUpUqVG15f6SyHDx9W2bJl87weNWrUsO3/vYoVK+YZo2jRojp37tyfzlO1alUVKmT/o/lG8xSU1WrViBEjtGfPHh07dkzz5s3T/fffr48++kgDBw6UJJ06dUrnz5/Xf/7zH4WGhtp9Xf/jIT09/abP83rI+7PneTOFCxfOc1lCcHCwypcvn+f6zuDgYLu59u3bp5UrV+apv1WrVretfgB/zV1zjemlS5dUp04d/fOf/9TDDz98S2MkJCRo9erVmjx5su69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AAAAeCaHg2lycrKWLVtm237uuecUEhKiqKgoHT582KnFAQAAwHM4HExfeeUV+fn5SZI2b96sGTNmaNKkSSpRooSGDBni9AIBAADgGRy+xvTIkSO2dUcXL16sRx55RAMGDFCTJk0UExPj7PoAAADgIRw+YhoQEKAzZ85IklavXm27g75w4cK6cuWKc6sDAACAx3D4iGnr1q3Vr18/1atXTz/99JPat28vSfr+++8VHh7u7PoAAADgIRw+YjpjxgxFRkbq1KlT+vjjj1W8eHFJ0vbt29W9e3enFwgAAADP4PAR05CQEL355pt52l966SWnFAQAAADP5HAwbdasmZo3b67o6GhFRUWpcOHCrqgLAAAAHsbhU/l///vftXnzZnXq1EkhISF64IEH9O9//1tr1qzR5cuXXVEjAAAAPIDDR0z//e9/S5Kys7O1detWrV+/XikpKZo0aZIKFSqkX3/91elFAgAA4O7ncDC97ueff9bu3bu1a9cupaamKjAwUM2aNXNmbQAAAPAgDgfTHj16aP369crKylKzZs0UHR2t4cOHq3bt2rJYLK6oEQAAAB7A4WA6f/58lShRQv369VOLFi30wAMPqEiRIq6oDQAAAB7E4Zufzpw5o//+97+6evWqEhMTVaJECUVFRemFF17Q6tWrXVEjAAAAPIDDwbRo0aLq1KmTpk6dqu3btys1NVXVqlXTq6++qnbt2rmiRgAAAHgAh0/lnzlzxnYnfkpKin744QeFhISoY8eOio6OdkWNAAAA8AAOB9OSJUuqRIkSatq0qfr376+YmBjde++9rqgNAAAAHsThYJqamqqaNWu6ohYAAAB4MIevMa1Zs6ays7P1xRdfaNasWcrIyJAkHTt2TJmZmU4vEAAAAJ7B4SOmhw8fVtu2bZWWlqasrCy1bt1agYGBmjhxorKysjRz5kxX1AkAAIC7nMNHTBMSEnTffffp3Llz8vPzs7U/9NBDWrt2rVOLAwAAgOdw+IjpV199pa+//lq+vr527eHh4Tp69KjTCgMAAIBncfiIaW5urnJycvK0//LLLwoMDHRKUQAAAPA8DgfTv//975o2bZpt22KxKDMzU6NGjVL79u2dWRsAAAA8iMOn8qdMmaI2bdooIiJCv/76q3r06KF9+/apRIkSmjdvnitqBAAAgAdwOJiWL19eu3bt0vz585WamqrMzEz1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fv00fPhwu1PwW7duVevWrVWiRAkFBwcrOjpaO3bssO0PDw+XJD300EOyWCy27d+fyl+9erUKFy6c5xK0hIQEtWjRwra9ceNGNW3aVH5+fqpQoYIGDRqkS5cu/eXXCfYIph4qOTlZ3t7e+vbbbzV9+nRNnTpV//3vfyX99gtx27Zt+uyzz7R582YZhqH27dvr2rVrkqT4+HhlZWVpw4YN2r17tyZOnJjvX55RUVGaNm2agoKCdPz4cR0/flzDhg3L0y82Nlaff/65MjMzbW2rVq3S5cuX9dBDD0mSxo8frzlz5mjmzJn6/vvvNWTIEPXs2VPr1693xcsDFEhycrL8/f21ZcsWTZo0SWPGjNGaNWskSY899pjS09O1YsUKbd++XfXr11fLli119uzZAo09ffp0RUZGqn///rb3T4UKFWz7hw8frgkTJmjPnj2qXbu2MjMz1b59e61du1b/+9//1LZtW3Xs2FFpaWkuee5AQfyV98gHH3ygcePGaeLEidq+fbsqVqyot99+2278jIwM9e7dWxs3btQ333yjqlWrqn379srIyJD0W3CVpNmzZ+v48eO27d9r2bKlQkJC9PHHH9vacnJytGDBAsXGxkqSDhw4oLZt2+qRRx5RamqqFixYoI0bN2rgwIHOf9E8nQGPEx0dbdSoUcPIzc21tT3//PNGjRo1jJ9++smQZGzatMm27/Tp04afn5/x0UcfGYZhGPfee68xevTofMdet26dIck4d+6cYRiGMXv2bCM4ODhPv7CwMOO1114zDMMwrl27ZpQoUcKYM2eObX/37t2Nrl27GoZhGL/++qtRpEgR4+uvv7Ybo2/fvkb37t0dfv6AM0RHRxsPPPCAXVvDhg2N559/3vjqq6+MoKAg49dff7XbX7lyZWPWrFmGYRhG7969jc6dO9vtT0hIMKKjo+3mSEhIsOtz/T22ePHiP62xZs2axhtvvGHb/v37DnC1v/oeady4sREfH2+3v0mTJkadOnVuOGdOTo4RGBhofP7557Y2Scann35q12/UqFF24yQkJBgtWrSwba9atcqwWq2232V9+/Y1BgwYYDfGV199ZRQqVMi4cuXKDeuB4zhi6qHuv/9+WSwW23ZkZKT27dunH374Qd7e3mrcuLFtX/HixVW9enXt2bNHkjRo0CCNHTtWTZo00ahRo5SamvqXavH29tbjjz+u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\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"5d589375"},"source":["## Summary:\n","\n","### Data Analysis Key Findings\n","* The analysis categorized customer reviews into positive, neutral, and negative sentiments based on numerical ratings (5 for positive, 3-4 for neutral, and 1-2 for negative).\n","* A total of 7,824,481 reviews were analyzed.\n","* The distribution of sentiments is strongly skewed towards positive reviews, with 4,347,540 (55.56%) categorized as positive.\n","* Neutral reviews accounted for 2,118,854 (27.08%).\n","* Negative reviews were the least frequent, with 1,358,087 (17.36%).\n","\n","### Insights or Next Steps\n","* The dataset indicates a predominantly positive customer sentiment for the products reviewed.\n","* Further analysis could involve exploring the content of the reviews to understand the specific reasons behind positive, neutral, and negative feedback.\n"]}]}